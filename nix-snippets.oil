#!/usr/bin/env oil

### TODO: Tests!
### TODO: Maybe define a Nix-Snippet standard and allow other snippet sources (from github & co)
setglobal SOURCES = [ './snippets/' ]
setglobal IGNOREFILE = 'ignores'
setglobal IMPORTFILE = '/etc/nixos/snippets/default.nix'
setglobal DESTINATION = '/etc/nixos/snippets'
setglobal SUDO = %(sudo)
setglobal DIFF = %(diff --color --)

# Printing help functions
#--------------------------------------------------------------------------------
# If we have the utility "rich-cli" installed, we can use [fontification] lateron (I'm too tired of figuring out \esomecrap)
try command -v rich > /dev/null
if (_status === 0) {
  setglobal RICH_ENABLED = true
  setglobal RICH = %(rich -p)
  proc info (text) {
    @RICH "[magenta]$text"
  }
  proc success (text) {
    @RICH "[green]$text"
  }
  proc fail (text) {
    @RICH "[red bold]$text"
    exit 1
  }
  proc abort (text) {
    @RICH "[magenta bold]$text"
    exit 1
  }
} else {
  setglobal RICH_ENABLED = false
  proc info (text) {
    echo -e "\\e[36m$text\\e[0m"
  }
  proc success (text) {
    echo -e "\\e[32m$text\\e[0m"
  }
  proc fail (text) {
    echo -e "\\e[31m$text\\e[0m"
    exit 1
  }
  proc abort (text) {
    echo -e "\\e[35m$text\\e[0m"
    exit 1
  }
}

# Nix specific Functions
#--------------------------------------------------------------------------------
proc testInit (:initStatus) {
  ### test if snippets is already configured and if there are errors
  var status = {}
  # TODO use a block and unset errexit as soon as possible
  try grep -q $DESTINATION /etc/nixos/configuration.nix
  setvar status->import = _status
  try test -d $DESTINATION
  setvar status->dir = _status
  try test -f "$IMPORTFILE"
  setvar status->file = _status

  setvar status->overall = true;
  for key, val in (status) {
    # Be aware we can't use "false" because 1 is true in python and 0 is false
    if (val === 1) {
      setvar status->overall = false;
      break
    }
  }
  setref initStatus = status
}

proc addImport (path, importedFile) {
  info "Adding import statement to $path"
  # This way we keep all indentations
  read --all :_content < $path
  var tempFile = $(mktemp)
  var content = _content.split($'\n')
  var i = 0
  {
    while (i < len(content)) {
      var line = content[i]
      # TODO: This currently *only* matches 'imports = [' and 'imports =' , but not .e.g. 'imports = [ something ]'
      #if (line ~ / <s*> 'imports' s* '=' s* '[' /) {
      #  write $line
      #  write "$[_match(1)] $importedFile"
      #} el
      if (line ~ / <s*> 'imports' s* '=' /) {
        write $line
        setvar i += 1
        write $[content[i]] # print the line containing '['
        write "$[_match(1)]    $importedFile"
      } else {
        write $line
      }
      setvar i += 1
    }
  } > $tempFile
  try @DIFF $path $tempFile
  if (_status !== 0) {
    var input = "N"
    # TODO: put this var directly in the comparison
    # Because of a bug a loop only works one iteration in Oil 0.12.0. With a eggex-var it works twice, yey!
    var regex = / %start [ "yY" ] /
    while (input !~ regex) {
      info -n "Can these changes be applied to $path? [y/n] "
      read --line input
      if (input ~ / %start ["nN"] /) {
        info "Aborting because changes shouldn't be applied to $path."
        exit 1
      }
    }
    var backupfile = "${path}.bak.$(date +%y%m%d-%H%M)"
    if test -f $backupfile {
      abort "There is a already a nixos backup file. Remove this file or try again in a minute: $backupfile"
    }
    @SUDO cp $path $backupfile
    @SUDO mv $tempFile $path
  } else {
    rm $tempFile
    fail "For some reason trying to add '$importedFile' to $path doesn't make any difference!!"
  }
}

# Single Snippet Functions
#--------------------------------------------------------------------------------
proc getSnippet (path, :snippet) {
  var fileName = ${path##*/}
  var snippetName = ${fileName%.*}
  var newFile = $DESTINATION ++ "/" ++ $fileName
  var status = ''
  var fileDiff = ''
  try test -f $path
  if (_status !== 0) {
    return 1
  }

  #try test -f $newFile
  if ! test -f $newFile {
    setvar status = "new"
  } else {
    #
    var lastLine = $(tail -1 $newFile)
    if (lastLine ~ "#ignored") {
      setvar status = "ignored"
    } else {
      # TODO: Lint both files before diffing them to minimize diff
      setvar fileDiff = $(diff --suppress-common-lines --suppress-blank-empty -twB $path $newFile)
      if test -z $fileDiff {
        setvar status = "uptodate"
      } else {
        setvar status = "diff"
      }
    }
  }
  var s = { name: $snippetName,
                     path: $path,
                     newFile: $newFile,
                     status: $status }
  if test -n $fileDiff { setvar s['diff'] = $fileDiff }
  setref snippet = s
}

proc getSnippets (:snippetsOut) {
  ### List all Snippets which can be added to the config
  # Under the hood:
  # find all lines containing milkos.NAME.enable and return a list containing dicts
  # Snippet dict contains:
  # name -> Obvious
  # path -> A hash of the configuration
  # state -> string of either: new, ignored, uptodate or diff
  #       -> new: Is not implemented in the config
  #       -> ignored: Has been looked at once, don't want to see it again (e.g. has been implemented
  #       -> uptodate: Is currently used and the same as
  #       -> diff: is currently used, but there is a diff to the config in use
  # newFile -> path to a new file
  # Optional: A diff
  var fileList = %()
  var snippets = {}
  for source in @SOURCES {
    setvar fileList = fileList ++ %($source/*nix)
  }
  for file in @fileList {
    runproc getSnippet $file :snippet
    setvar snippets[snippet->name] = snippet
  }
  setref snippetsOut = snippets
}

# Command Wrappers
#--------------------------------------------------------------------------------
proc list {
  ### List all existing snippets (which aren't ignored)
  getSnippets :snippets
  for _, snippet in (snippets) {
    if (snippet->status !== 'ignored') {
      if (RICH_ENABLED) {
        success "[bold]$[snippet->name]: [/bold]$[snippet->status]"
      } else {
        success "$[snippet->name]: $[snippet->status]"
      }
    }
  }
}

proc init {
  ### Initialize snippet by setting up the proper files
  testInit :status
  if (status->overall) {
    write "nix-snippet is already set up :)"
    return
  }
  if (status->import === 1) {
    addImport /etc/nixos/configuration.nix "$IMPORTFILE"
  } else {
    write "1. $IMPORTFILE already included"
  }
  if (status->dir === 1) {
    write "creating folder $DESTINATION"
    $SUDO mkdir -p $DESTINATION
  } else {
    write "2. $DESTINATION already exists"
  }
  if (status->file === 1) {
    write "Creating file $IMPORTFILE"
    # TODO: make sure this works after packaging
    $SUDO cp $_this_dir/src/default.nix.template $IMPORTFILE
  } else {
    write "3. $IMPORTFILE already exists"
  }
}

runproc @ARGV
